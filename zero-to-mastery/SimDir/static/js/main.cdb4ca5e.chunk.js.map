{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","onSearch","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","picture","cell","src","concat","alt","CardList","directory","cardArray","map","user","i","components_Card","key","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","data","people","results","length","person","large","first","last","username","login","_this$state","filteredDirectory","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdb4ca5e.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({onSearch}) => {\n\treturn (\n        <div className='ma3'>\n            <input className='bw1 b--pink bg-washed-red' \n                   type='search' \n                   placeholder='search directory' \n                   onChange={onSearch} />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Cards.css';\n\nconst Card = ({id, name, email, picture, cell}) => {\n    return (\n        <div className='bg-light-blue br4 pa2 dib ma2 grow bw1 shadow-3 tc'>\n            <img className=\"cards\" src={`${picture}`} alt=' ' />\n            <div>\n                <p className='ttc'>{name}</p>\n                <p>{cell}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({directory}) => {\n    const cardArray = directory.map((user, i) => {\n        return <Card key={i} id={directory[i].id} name={directory[i].name} email={directory[i].email} picture={directory[i].picture} cell={directory[i].cell} />;\n    })\n    return (\n        <div className='flex flex-wrap justify-center'>\n            {cardArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n        <div style={{overflowY: 'scroll', height: '83vh'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList'; \nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            searchField: '',\n            directory: [],\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://randomuser.me/api/?results=100')\n            .then(response => response.json())\n            .then(data => {\n                let people = data.results;\n                for (let i = 0; i < people.length; i++) {\n                    let person = {\n                                    id: i,\n                                    picture: people[i].picture.large,\n                                    name: people[i].name.first + \" \" + people[i].name.last,\n                                    username: people[i].login.username,\n                                    email: people[i].email,\n                                    cell: people[i].cell\n                                 };\n                    this.setState({directory: this.state.directory.concat(person)});\n                }\n            });\n    }\n\n    onSearch = (event) => {\n        this.setState({ searchField: event.target.value });       \n    }\n    \n    render() {\n        const { directory, searchField } = this.state;\n        const filteredDirectory = directory.filter(directory => {\n            return directory.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return (!directory.length) ?\n            <h2 className='tc'>Loading....</h2> :\n            (\n                <div className='tc avenir'>\n                    <h1 className='orange'>Simulated Directory</h1>\n                    <SearchBox onSearch={this.onSearch} />\n                    <Scroll>\n                        <CardList directory={filteredDirectory} />\n                    </Scroll>\n                    <div className='f6 ma3'>Directory populated using <a href='https://randomuser.me/' target='_new'>Random User Generator</a>.</div>\n                </div>\n            );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}