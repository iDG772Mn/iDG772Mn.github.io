{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","_ref","onSearch","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","picture","cell","src","concat","alt","CardList","directory","cardArray","map","user","i","components_Card","key","Scroll","props","style","overflowY","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestDirectory","_this$props","searchField","isPending","filteredDirectory","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","href","target","connect","searchDirectory","requestDirectory","dispatch","event","payload","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateDirectory","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","people","results","dir","person","large","first","last","username","login","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac2c3e64.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({onSearch}) => {\n\treturn (\n        <div className='ma3'>\n            <input className='bw1 b--pink bg-washed-red' \n                   type='search' \n                   placeholder='search directory' \n                   onChange={onSearch} />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Cards.css';\n\nconst Card = ({id, name, email, picture, cell}) => {\n    return (\n        <div className='bg-light-blue br4 pa2 dib ma2 grow bw1 shadow-3 tc'>\n            <img className=\"cards\" src={`${picture}`} alt=' ' />\n            <div>\n                <p className='ttc f6'>{name}</p>\n                <p className='f7'>{cell}</p>\n                <p className='f7'>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({directory}) => {\n    const cardArray = directory.map((user, i) => {\n        return <Card key={i} id={directory[i].id} name={directory[i].name} email={directory[i].email} picture={directory[i].picture} cell={directory[i].cell} />;\n    })\n    return (\n        <div className='flex flex-wrap justify-center'>\n            {cardArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n        <div style={{overflowY: 'scroll', height: '83vh'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n\trender() {\n        return (this.state.hasError) ?\n            <h1>Oops. Something went wrong...</h1> :\n            this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList'; \nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField, requestDirectory } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchDirectory.searchField,\n        directory: state.requestDirectory.directory,\n        isPending: state.requestDirectory.isPending,\n        error: state.requestDirectory.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearch: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestDirectory: () => dispatch(requestDirectory())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestDirectory();\n    }\n\n    render() {\n        const { searchField, onSearch, directory, isPending } = this.props;\n        const filteredDirectory = directory.filter(directory => {\n            return directory.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ?\n            <h2 className='tc'>Loading....</h2> :\n            (\n                <div className='tc avenir'>\n                    <h1 className='orange'>Simulated Directory</h1>\n                    <SearchBox onSearch={onSearch} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList directory={filteredDirectory} />\n                        </ErrorBoundary>\n                    </Scroll>\n                    <div className='f6 ma3'>Directory populated using <a href='https://randomuser.me/' target='_new'>Random User Generator</a>.</div>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n        REQUEST_PEOPLE_PENDING,\n        REQUEST_PEOPLE_SUCCESS,\n        REQUEST_PEOPLE_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestDirectory = () => (dispatch) => {\n    dispatch({ type: REQUEST_PEOPLE_PENDING });\n    fetch('https://randomuser.me/api/?results=100')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_PEOPLE_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_PEOPLE_FAILED, payload: error }));  \n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_PEOPLE_PENDING = 'REQUEST_PEOPLE_PENDING';\nexport const REQUEST_PEOPLE_SUCCESS = 'REQUEST_PEOPLE_SUCCESS';\nexport const REQUEST_PEOPLE_FAILED = 'REQUEST_PEOPLE_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_PEOPLE_PENDING,\n    REQUEST_PEOPLE_SUCCESS,\n    REQUEST_PEOPLE_FAILED } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nconst initialStateDirectory = {\n    isPending: false,\n    directory: [],\n    error: ''\n}\n\nexport const searchDirectory = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nexport const requestDirectory = (state=initialStateDirectory, action={}) => {\n    switch(action.type) {\n        case REQUEST_PEOPLE_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_PEOPLE_SUCCESS:\n            let people = action.payload.results;\n            let dir = [];\n            for (let i = 0; i < people.length; i++) {\n                let person = {  id: i,\n                                picture: people[i].picture.large,\n                                name: people[i].name.first + \" \" + people[i].name.last,\n                                username: people[i].login.username,\n                                email: people[i].email,\n                                cell: people[i].cell };\n                dir = dir.concat(person); }\n            return Object.assign({}, state, { isPending: false, directory: dir });\n        case REQUEST_PEOPLE_FAILED:\n            return Object.assign({}, state, {isPending: false, error: action.payload });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchDirectory, requestDirectory } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchDirectory, requestDirectory });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}